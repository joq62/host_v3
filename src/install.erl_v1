%%% -------------------------------------------------------------------
%%% @author  : Joq Erlang
%%% @doc: : 
%%% Created :
%%% Node end point  
%%% Creates and deletes Pods
%%% 
%%% API-kube: Interface 
%%% Pod consits beams from all services, app and app and sup erl.
%%% The setup of envs is
%%% -------------------------------------------------------------------
-module(install).   
 
-export([start/0,
	 install_etcd/0,
	 check_host_status/1,
	 create_load_host/1
	]).
%% --------------------------------------------------------------------
%% Include files
%% --------------------------------------------------------------------


%% --------------------------------------------------------------------
%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------
start()->
    % This code should be in cluster that creates the initial set up
    % 1.0 Start local and needed applications 
    ok=application:start(common),
    ok=application:start(config),
    ok=install_etcd(),
    
    % Check available hosts
    HostInfoList=db_host_spec:read_all(),
    {Available,_Missing}=check_hosts_status(HostInfoList),
    Result=case Available of
	       []->
		   {error,[no_hosts_available]};
	       Available->
		   [_InitialHost|_Rest]=Available,
		   CreateResult=[{create_load_host(Host),Host}||Host<-Available],
		   % {{ok,Node,Dir},Host}
		   CreateResult
		 
	   end,
    Result.

%% --------------------------------------------------------------------
%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------
install_all(Rest,InitialNode)->
    install_all(Rest,InitialNode,[]).

install_all([],_InitialNode,Result)->
    Result;
install_all([Host|T],InitialNode,Acc) ->
    {ok,Node,Dir}=create_load_host(Host).
%% --------------------------------------------------------------------
%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------
create_load_host(Host)->
    {Host,Ip,_,Port,User,Password,_}=db_host_spec:read(Host),
    BaseDir=Host,
    NodeName=Host, 
    TimeOut=7000,
    Cookie=atom_to_list(erlang:get_cookie()),
    
    %% Create host vm
    my_ssh:ssh_send(Ip,Port,User,Password,"rm -rf "++BaseDir,TimeOut),
    my_ssh:ssh_send(Ip,Port,User,Password,"mkdir "++BaseDir,TimeOut),
    PaArgs=" -hidden ",
    EnvArgs=" ",
    {ok,Node}=vm:ssh_create(Host,NodeName,Cookie,PaArgs,EnvArgs,
			    {Ip,Port,User,Password,TimeOut}),  
    
    % load and start host 
    App=host,
    {ok,GitPath}=db_application_spec:read(gitpath,"host.spec"),
    ApplDir=filename:join(BaseDir,atom_to_list(App)),
    ok=rpc:call(Node,file,make_dir,[ApplDir]),
    {ok,Dir}=appl:git_clone_to_dir(Node,GitPath,ApplDir),
    ok=appl:load(Node,App,[filename:join([BaseDir,atom_to_list(App),"ebin"])]),
    ok=appl:start(Node,App),
    {ok,Node,Dir}.
    
			  


%% --------------------------------------------------------------------
%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------
check_host_status(HostName)->
    {HostName,Ip,IpExt,Port,User,Password,HwApp}=db_host_spec:read(HostName),
    check_hosts_status([{HostName,Ip,IpExt,Port,User,Password,HwApp}],[]).

check_hosts_status(HostInfoList)->
    check_hosts_status(HostInfoList,[]).

check_hosts_status([],HostStatus)->
    Available=[HostName||{HostName,R}<-HostStatus,
			 ok=:=R],
    Missing=[HostName||{HostName,R}<-HostStatus,
		       ok=/=R],
    {lists:sort(Available),lists:sort(Missing)};
check_hosts_status([{HostName,Ip,IpExt,Port,User,Password,HwApp}|T],Acc) ->
    TimeOut=10*1000,
    Check=my_ssh:ssh_send(Ip,Port,User,Password,"hostname ",TimeOut),
   % io:format("Host,Check  ~p~n",[{HostName,Check}]),
    NewAcc=case Check of
	       [HostName]->
		   [{HostName,ok}|Acc];
	       ok->
		   [{HostName,ok}|Acc];
	       Reason->
		   [{HostName,[error,Reason]}|Acc]
	   end,
		   
    check_hosts_status(T,NewAcc).
    

%% --------------------------------------------------------------------
%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------
install_etcd()->
    ok=application:start(etcd),    
    % Install etcd on this intial node used to create the other host nodes!!
    ok=rpc:call(node(),dbase_lib,dynamic_install_start,[node()],5000),
    ok=rpc:call(node(),db_host_spec,init_table,[node(),node()],10*1000),
    ok=rpc:call(node(),db_application_spec,init_table,[node(),node()],10*1000),
    ok=rpc:call(node(),db_deployment_info,init_table,[node(),node()],10*1000),
    ok=rpc:call(node(),db_deployments,init_table,[node(),node()],10*1000),    
    ok.

%% --------------------------------------------------------------------
%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------

%% --------------------------------------------------------------------
%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------
-define(IpC100,"192.168.1.100").
-define(Port,22).
-define(UserC100,"joq62").
-define(PasswordC100,"festum01").
-define(TimeOut,6000).
-define(IpC200,"192.168.1.200").
-define(UserC200,"ubuntu").
-define(PasswordC200,"festum01").

-define(IpC202,"192.168.1.202").
-define(UserC202,"ubuntu").
-define(PasswordC202,"festum01").

-define(Cookie,atom_to_list(erlang:get_cookie())).
-define(EnvArgs," "). 
-define(PaArgsInit," ").

start_1()->


    % 
    os:cmd("rm -rf Mnesia.c100@c100"),
    os:cmd("rm -rf Mnesia.c200@c200"),
    os:cmd("rm -rf Mnesia.c202@c202"),    
    
    % 1. C100: 
    % 1.1 Create Create base dir and remote Node, should be hidden!
    BaseDirC100="host_c100",
    HostC100="c100",
    NodeNamC100="c100",
    {ok,C100}=create_dir_start_vm(?IpC100,?Port,?UserC100,?PasswordC100,?TimeOut,
			HostC100,NodeNamC100,BaseDirC100),
   
    rpc:call(node(),application,start,[config]),  
    
    % 1.3 load and start common
    {ok,CommonDirC100}=load_start_appl(C100,BaseDirC100,"https://github.com/joq62/common.git",common),
    % 1.4 load and start  etcd
    {ok,EtcdDirC100}=load_start_appl(C100,BaseDirC100,"https://github.com/joq62/etcd.git",etcd),
  
    
    % 1.5 Install db_
    ok=rpc:call(C100,dbase_lib,dynamic_install_start,[C100],5000),
    ok=rpc:call(node(),db_host_spec,init_table,[node(),C100],10*1000),
    ok=rpc:call(node(),db_application_spec,init_table,[node(),C100],10*1000),
    ok=rpc:call(node(),db_deployment_info,init_table,[node(),C100],10*1000),
    ok=rpc:call(node(),db_deployments,init_table,[node(),C100],10*1000),
			
    % 2. C200: 
    % 2.1 Create Create base dir and remote Node
    BaseDirC200="host_c200",
    HostC200="c200",
    NodeNamC200="c200",
    {ok,C200}=create_dir_start_vm(?IpC200,?Port,?UserC200,?PasswordC200,?TimeOut,
			HostC200,NodeNamC200,BaseDirC200),
    % 2.2 load and start common
    {ok,CommonDirC200}=load_start_appl(C200,BaseDirC200,"https://github.com/joq62/common.git",common),
    % 2.3 load and start  etcd
    {ok,EtcdDirC200}=load_start_appl(C200,BaseDirC200,"https://github.com/joq62/etcd.git",etcd),
 
    % 2.4 Install db_
    ok=rpc:call(C100,dbase_lib,dynamic_install,[[C200],C100],5000),
    
    % 3. C202: 
    % 3.1 Create Create base dir and remote Node
    BaseDirC202="host_c202",
    HostC202="c202",
    NodeNamC202="c202",
    {ok,C202}=create_dir_start_vm(?IpC202,?Port,?UserC202,?PasswordC202,?TimeOut,
			HostC202,NodeNamC202,BaseDirC202),
    % 2.2 load and start common
    {ok,CommonDirC202}=load_start_appl(C202,BaseDirC202,"https://github.com/joq62/common.git",common),
    % 2.3 load and start  etcd
    {ok,EtcdDirC202}=load_start_appl(C202,BaseDirC202,"https://github.com/joq62/etcd.git",etcd),
 
    % 2.4 Install db_
    ok=rpc:call(C100,dbase_lib,dynamic_install,[[C202],C100],5000),
    

    io:format("mnesia:system_info() ~p~n",[rpc:call(C100,mnesia,system_info,[])]),
    %%  
  
    io:format("TEST OK! ~p~n",[?MODULE]),
    timer:sleep(1000),
    ok.


%% --------------------------------------------------------------------
%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------
load_start_appl(Node,BaseDir,GitPath,App)->
    ApplDir=filename:join(BaseDir,atom_to_list(App)),
    ok=rpc:call(Node,file,make_dir,[ApplDir]),
    {ok,Dir}=appl:git_clone_to_dir(Node,GitPath,ApplDir),
    ok=appl:load(Node,App,[filename:join([BaseDir,atom_to_list(App),"ebin"])]),
    ok=appl:start(Node,App),
    {ok,Dir}.
%% --------------------------------------------------------------------
%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------
create_dir_start_vm(Ip,Port,User,Password,TimeOut,
		    HostName,NodeName,BaseDir)->
    
    my_ssh:ssh_send(Ip,Port,User,Password,"rm -rf "++BaseDir,TimeOut),
    my_ssh:ssh_send(Ip,Port,User,Password,"mkdir "++BaseDir,TimeOut),
   
    {ok,Node}=vm:ssh_create(HostName,NodeName,?Cookie,"-hidden",?EnvArgs,
			    {Ip,Port,User,Password,TimeOut}),

    {ok,Node}.

%% --------------------------------------------------------------------
%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------
copy_spec_dirs(Node,BaseDir)->

    []=rpc:call(Node,os,cmd,["rm -rf "++filename:join(BaseDir,"application_info_specs")]),
    timer:sleep(1000),
    ok=rpc:call(Node,file,make_dir,[filename:join(BaseDir,"application_info_specs")]),    
    copy_dir(node(),"application_info_specs",Node,filename:join(BaseDir,"application_info_specs")),

    []=rpc:call(Node,os,cmd,["rm -rf "++filename:join(BaseDir,"deployment_info_specs")]),
    timer:sleep(1000),
    ok=rpc:call(Node,file,make_dir,[filename:join(BaseDir,"deployment_info_specs")]),    
    copy_dir(node(),"deployment_info_specs",Node,filename:join(BaseDir,"deployment_info_specs")),

    []=rpc:call(Node,os,cmd,["rm -rf "++filename:join(BaseDir,"deployments")]),
    timer:sleep(1000),
    ok=rpc:call(Node,file,make_dir,[filename:join(BaseDir,"deployments")]),    
    copy_dir(node(),"deployments",Node,filename:join(BaseDir,"deployments")),

    []=rpc:call(Node,os,cmd,["rm -rf "++filename:join(BaseDir,"host_info_specs")]),
    timer:sleep(1000),
    ok=rpc:call(Node,file,make_dir,[filename:join(BaseDir,"host_info_specs")]),    
    copy_dir(node(),"host_info_specs",Node,filename:join(BaseDir,"host_info_specs")),
    ok.
%% --------------------------------------------------------------------
%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------
copy_dir(SourceNode,SourceDir,DetsNode,DestDir)->
    {ok,BaseFiles}=rpc:call(SourceNode,file,list_dir,[SourceDir],5000),
    SourceDestFiles=[{filename:join(["./",SourceDir,FileName]),
		      filename:join(["./",DestDir,FileName])}||FileName<-BaseFiles,
							       false=:=filelib:is_dir(filename:join(["./",SourceDir,FileName]))],
    [read_write_file(SourceNode,SourceFile,DetsNode,DestFile)||{SourceFile,DestFile}<-SourceDestFiles].
			    


read_write_file(SourceNode,SourceFile,DetsNode,DestFile)->
%    io:format("SourceNode,SourceFile,DetsNode,DestFile ~p~n",[{SourceNode,SourceFile,DetsNode,DestFile}]), 
    case rpc:call(SourceNode,file,read_file,[SourceFile],5000) of
	{badrpc,Reason}->
	    {badrpc,Reason};
	{ok,Bin} ->
	    case rpc:call(DetsNode,file,write_file,[DestFile,Bin],2*5000) of
		{badrpc,Reason}->
		    {badrpc,Reason};
		ok->
		    ok
	    end
    end.
		
%% --------------------------------------------------------------------
%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------

%% --------------------------------------------------------------------
%% Function: available_hosts()
%% Description: Based on hosts.config file checks which hosts are avaible
%% Returns: List({HostId,Ip,SshPort,Uid,Pwd}
%% --------------------------------------------------------------------
setup()->
  
    % Simulate host
  %  R=rpc:call(node(),test_nodes,start_nodes,[],2000),
%    [Vm1|_]=test_nodes:get_nodes(),

%    Ebin="ebin",
 %   true=rpc:call(Vm1,code,add_path,[Ebin],5000),
 
   % R.
    ok.
